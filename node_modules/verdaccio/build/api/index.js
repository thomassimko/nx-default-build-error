"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.loadTheme = loadTheme;
var _compression = _interopRequireDefault(require("compression"));
var _cors = _interopRequireDefault(require("cors"));
var _express = _interopRequireDefault(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _config = require("@verdaccio/config");
var _middleware = require("@verdaccio/middleware");
var _search = require("@verdaccio/search");
var _auth = _interopRequireDefault(require("../lib/auth"));
var _config2 = _interopRequireDefault(require("../lib/config"));
var _constants = require("../lib/constants");
var _logger = require("../lib/logger");
var _pluginLoader = _interopRequireDefault(require("../lib/plugin-loader"));
var _storage = _interopRequireDefault(require("../lib/storage"));
var _utils = require("../lib/utils");
var _debug = _interopRequireDefault(require("./debug"));
var _endpoint = _interopRequireDefault(require("./endpoint"));
var _middleware2 = require("./middleware");
var _web = _interopRequireDefault(require("./web"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  version
} = require('../../package.json');
function loadTheme(config) {
  if (_lodash.default.isNil(config.theme) === false) {
    return _lodash.default.head((0, _pluginLoader.default)(config, config.theme, {}, function (plugin) {
      return plugin.staticPath && plugin.manifest && plugin.manifestFiles;
    }, 'verdaccio-theme'));
  }
}
const defineAPI = async function (config, storage) {
  var _config$server;
  const auth = new _auth.default(config);
  const app = (0, _express.default)();
  _search.SearchMemoryIndexer.configureStorage(storage);
  await _search.SearchMemoryIndexer.init(_logger.logger);
  // run in production mode by default, just in case
  // it shouldn't make any difference anyway
  app.set('env', process.env.NODE_ENV || 'production');

  // Allow `req.ip` to resolve properly when Verdaccio is behind a proxy or load-balancer
  // See: https://expressjs.com/en/guide/behind-proxies.html
  if ((_config$server = config.server) !== null && _config$server !== void 0 && _config$server.trustProxy) {
    app.set('trust proxy', config.server.trustProxy);
  }
  app.use((0, _cors.default)());

  // // Router setup
  app.use((0, _middleware.log)(_logger.logger));
  app.use((0, _middleware.errorReportingMiddleware)(_logger.logger));
  if (config.user_agent) {
    app.use(function (_req, res, next) {
      res.setHeader('X-Powered-By', (0, _config.getUserAgent)(config.user_agent));
      next();
    });
  } else {
    app.disable('x-powered-by');
  }
  app.use((0, _compression.default)());
  app.get('/-/static/favicon.ico', (0, _middleware2.serveFavicon)(config));

  // Hook for tests only
  if (config._debug) {
    (0, _debug.default)(app, config.configPath);
  }

  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const plugins = (0, _pluginLoader.default)(config, config.middlewares, plugin_params, function (plugin) {
    // @ts-ignore
    return plugin.register_middlewares;
  });
  plugins.forEach(plugin => {
    plugin.register_middlewares(app, auth, storage);
  });

  // // For  npm request
  app.use((0, _endpoint.default)(config, auth, storage));

  // For WebUI & WebUI API
  if (_lodash.default.get(config, 'web.enable', true)) {
    app.use((_req, res, next) => {
      res.locals.app_version = version !== null && version !== void 0 ? version : '';
      next();
    });
    app.use((0, _web.default)(config, auth, storage));
  } else {
    app.get('/', function (_, __, next) {
      next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.WEB_DISABLED));
    });
  }
  app.get('/*', function (_, __, next) {
    next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.FILE_NOT_FOUND));
  });
  app.use((0, _middleware.handleError)(_logger.logger));
  app.use(_middleware.final);
  return app;
};
var _default = exports.default = async function _default(configHash) {
  (0, _logger.setup)(configHash.logs);
  const config = new _config2.default(_lodash.default.cloneDeep(configHash));
  // register middleware plugins
  const plugin_params = {
    config: config,
    logger: _logger.logger
  };
  const filters = (0, _pluginLoader.default)(config, config.filters || {}, plugin_params,
  // @ts-ignore
  plugin => plugin.filter_metadata);
  const storage = new _storage.default(config);
  // waits until init calls have been initialized
  await storage.init(config, filters);
  return await defineAPI(config, storage);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29tcHJlc3Npb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb3JzIiwiX2V4cHJlc3MiLCJfbG9kYXNoIiwiX2NvbmZpZyIsIl9taWRkbGV3YXJlIiwiX3NlYXJjaCIsIl9hdXRoIiwiX2NvbmZpZzIiLCJfY29uc3RhbnRzIiwiX2xvZ2dlciIsIl9wbHVnaW5Mb2FkZXIiLCJfc3RvcmFnZSIsIl91dGlscyIsIl9kZWJ1ZyIsIl9lbmRwb2ludCIsIl9taWRkbGV3YXJlMiIsIl93ZWIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInZlcnNpb24iLCJsb2FkVGhlbWUiLCJjb25maWciLCJfIiwiaXNOaWwiLCJ0aGVtZSIsImhlYWQiLCJsb2FkUGx1Z2luIiwicGx1Z2luIiwic3RhdGljUGF0aCIsIm1hbmlmZXN0IiwibWFuaWZlc3RGaWxlcyIsImRlZmluZUFQSSIsInN0b3JhZ2UiLCJfY29uZmlnJHNlcnZlciIsImF1dGgiLCJBdXRoIiwiYXBwIiwiZXhwcmVzcyIsIlNlYXJjaE1lbW9yeUluZGV4ZXIiLCJjb25maWd1cmVTdG9yYWdlIiwiaW5pdCIsImxvZ2dlciIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInNlcnZlciIsInRydXN0UHJveHkiLCJ1c2UiLCJjb3JzIiwibG9nIiwiZXJyb3JSZXBvcnRpbmdNaWRkbGV3YXJlIiwidXNlcl9hZ2VudCIsIl9yZXEiLCJyZXMiLCJuZXh0Iiwic2V0SGVhZGVyIiwiZ2V0VXNlckFnZW50IiwiZGlzYWJsZSIsImNvbXByZXNzaW9uIiwiZ2V0Iiwic2VydmVGYXZpY29uIiwiaG9va0RlYnVnIiwiY29uZmlnUGF0aCIsInBsdWdpbl9wYXJhbXMiLCJwbHVnaW5zIiwibWlkZGxld2FyZXMiLCJyZWdpc3Rlcl9taWRkbGV3YXJlcyIsImZvckVhY2giLCJhcGlFbmRwb2ludCIsImxvY2FscyIsImFwcF92ZXJzaW9uIiwid2ViTWlkZGxld2FyZSIsIl9fIiwiRXJyb3JDb2RlIiwiZ2V0Tm90Rm91bmQiLCJBUElfRVJST1IiLCJXRUJfRElTQUJMRUQiLCJGSUxFX05PVF9GT1VORCIsImhhbmRsZUVycm9yIiwiZmluYWwiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJjb25maWdIYXNoIiwic2V0dXAiLCJsb2dzIiwiQXBwQ29uZmlnIiwiY2xvbmVEZWVwIiwiZmlsdGVycyIsImZpbHRlcl9tZXRhZGF0YSIsIlN0b3JhZ2UiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wcmVzc2lvbiBmcm9tICdjb21wcmVzc2lvbic7XG5pbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbmltcG9ydCBleHByZXNzLCB7IEFwcGxpY2F0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBnZXRVc2VyQWdlbnQgfSBmcm9tICdAdmVyZGFjY2lvL2NvbmZpZyc7XG5pbXBvcnQgeyBwbHVnaW5VdGlscyB9IGZyb20gJ0B2ZXJkYWNjaW8vY29yZSc7XG5pbXBvcnQgeyBlcnJvclJlcG9ydGluZ01pZGRsZXdhcmUsIGZpbmFsLCBoYW5kbGVFcnJvciB9IGZyb20gJ0B2ZXJkYWNjaW8vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBsb2cgfSBmcm9tICdAdmVyZGFjY2lvL21pZGRsZXdhcmUnO1xuaW1wb3J0IHsgU2VhcmNoTWVtb3J5SW5kZXhlciB9IGZyb20gJ0B2ZXJkYWNjaW8vc2VhcmNoJztcbmltcG9ydCB7IENvbmZpZyBhcyBJQ29uZmlnIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCBBdXRoIGZyb20gJy4uL2xpYi9hdXRoJztcbmltcG9ydCBBcHBDb25maWcgZnJvbSAnLi4vbGliL2NvbmZpZyc7XG5pbXBvcnQgeyBBUElfRVJST1IgfSBmcm9tICcuLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IGxvZ2dlciwgc2V0dXAgfSBmcm9tICcuLi9saWIvbG9nZ2VyJztcbmltcG9ydCBsb2FkUGx1Z2luIGZyb20gJy4uL2xpYi9wbHVnaW4tbG9hZGVyJztcbmltcG9ydCBTdG9yYWdlIGZyb20gJy4uL2xpYi9zdG9yYWdlJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgJFJlc3BvbnNlRXh0ZW5kIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGhvb2tEZWJ1ZyBmcm9tICcuL2RlYnVnJztcbmltcG9ydCBhcGlFbmRwb2ludCBmcm9tICcuL2VuZHBvaW50JztcbmltcG9ydCB7IHNlcnZlRmF2aWNvbiB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgd2ViTWlkZGxld2FyZSBmcm9tICcuL3dlYic7XG5cbmNvbnN0IHsgdmVyc2lvbiB9ID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkVGhlbWUoY29uZmlnKSB7XG4gIGlmIChfLmlzTmlsKGNvbmZpZy50aGVtZSkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIF8uaGVhZChcbiAgICAgIGxvYWRQbHVnaW4oXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgY29uZmlnLnRoZW1lLFxuICAgICAgICB7fSxcbiAgICAgICAgZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgICAgIHJldHVybiBwbHVnaW4uc3RhdGljUGF0aCAmJiBwbHVnaW4ubWFuaWZlc3QgJiYgcGx1Z2luLm1hbmlmZXN0RmlsZXM7XG4gICAgICAgIH0sXG4gICAgICAgICd2ZXJkYWNjaW8tdGhlbWUnXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBkZWZpbmVBUEkgPSBhc3luYyBmdW5jdGlvbiAoY29uZmlnOiBJQ29uZmlnLCBzdG9yYWdlOiBTdG9yYWdlKTogUHJvbWlzZTxleHByZXNzLkFwcGxpY2F0aW9uPiB7XG4gIGNvbnN0IGF1dGggPSBuZXcgQXV0aChjb25maWcpO1xuICBjb25zdCBhcHA6IEFwcGxpY2F0aW9uID0gZXhwcmVzcygpO1xuICBTZWFyY2hNZW1vcnlJbmRleGVyLmNvbmZpZ3VyZVN0b3JhZ2Uoc3RvcmFnZSk7XG4gIGF3YWl0IFNlYXJjaE1lbW9yeUluZGV4ZXIuaW5pdChsb2dnZXIpO1xuICAvLyBydW4gaW4gcHJvZHVjdGlvbiBtb2RlIGJ5IGRlZmF1bHQsIGp1c3QgaW4gY2FzZVxuICAvLyBpdCBzaG91bGRuJ3QgbWFrZSBhbnkgZGlmZmVyZW5jZSBhbnl3YXlcbiAgYXBwLnNldCgnZW52JywgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nKTtcblxuICAvLyBBbGxvdyBgcmVxLmlwYCB0byByZXNvbHZlIHByb3Blcmx5IHdoZW4gVmVyZGFjY2lvIGlzIGJlaGluZCBhIHByb3h5IG9yIGxvYWQtYmFsYW5jZXJcbiAgLy8gU2VlOiBodHRwczovL2V4cHJlc3Nqcy5jb20vZW4vZ3VpZGUvYmVoaW5kLXByb3hpZXMuaHRtbFxuICBpZiAoY29uZmlnLnNlcnZlcj8udHJ1c3RQcm94eSkge1xuICAgIGFwcC5zZXQoJ3RydXN0IHByb3h5JywgY29uZmlnLnNlcnZlci50cnVzdFByb3h5KTtcbiAgfVxuXG4gIGFwcC51c2UoY29ycygpKTtcblxuICAvLyAvLyBSb3V0ZXIgc2V0dXBcbiAgYXBwLnVzZShsb2cobG9nZ2VyKSk7XG4gIGFwcC51c2UoZXJyb3JSZXBvcnRpbmdNaWRkbGV3YXJlKGxvZ2dlcikpO1xuICBpZiAoY29uZmlnLnVzZXJfYWdlbnQpIHtcbiAgICBhcHAudXNlKGZ1bmN0aW9uIChfcmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ1gtUG93ZXJlZC1CeScsIGdldFVzZXJBZ2VudChjb25maWcudXNlcl9hZ2VudCkpO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGFwcC5kaXNhYmxlKCd4LXBvd2VyZWQtYnknKTtcbiAgfVxuXG4gIGFwcC51c2UoY29tcHJlc3Npb24oKSk7XG5cbiAgYXBwLmdldCgnLy0vc3RhdGljL2Zhdmljb24uaWNvJywgc2VydmVGYXZpY29uKGNvbmZpZykpO1xuXG4gIC8vIEhvb2sgZm9yIHRlc3RzIG9ubHlcbiAgaWYgKGNvbmZpZy5fZGVidWcpIHtcbiAgICBob29rRGVidWcoYXBwLCBjb25maWcuY29uZmlnUGF0aCk7XG4gIH1cblxuICAvLyByZWdpc3RlciBtaWRkbGV3YXJlIHBsdWdpbnNcbiAgY29uc3QgcGx1Z2luX3BhcmFtcyA9IHtcbiAgICBjb25maWc6IGNvbmZpZyxcbiAgICBsb2dnZXI6IGxvZ2dlcixcbiAgfTtcblxuICBjb25zdCBwbHVnaW5zOiBwbHVnaW5VdGlscy5BdXRoPElDb25maWc+W10gPSBsb2FkUGx1Z2luKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcubWlkZGxld2FyZXMsXG4gICAgcGx1Z2luX3BhcmFtcyxcbiAgICBmdW5jdGlvbiAocGx1Z2luOiBwbHVnaW5VdGlscy5NYW5pZmVzdEZpbHRlcjxJQ29uZmlnPikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIHBsdWdpbi5yZWdpc3Rlcl9taWRkbGV3YXJlcztcbiAgICB9XG4gICk7XG5cbiAgcGx1Z2lucy5mb3JFYWNoKChwbHVnaW46IGFueSkgPT4ge1xuICAgIHBsdWdpbi5yZWdpc3Rlcl9taWRkbGV3YXJlcyhhcHAsIGF1dGgsIHN0b3JhZ2UpO1xuICB9KTtcblxuICAvLyAvLyBGb3IgIG5wbSByZXF1ZXN0XG4gIGFwcC51c2UoYXBpRW5kcG9pbnQoY29uZmlnLCBhdXRoLCBzdG9yYWdlKSk7XG5cbiAgLy8gRm9yIFdlYlVJICYgV2ViVUkgQVBJXG4gIGlmIChfLmdldChjb25maWcsICd3ZWIuZW5hYmxlJywgdHJ1ZSkpIHtcbiAgICBhcHAudXNlKChfcmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHJlcy5sb2NhbHMuYXBwX3ZlcnNpb24gPSB2ZXJzaW9uID8/ICcnO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICAgIGFwcC51c2Uod2ViTWlkZGxld2FyZShjb25maWcsIGF1dGgsIHN0b3JhZ2UpKTtcbiAgfSBlbHNlIHtcbiAgICBhcHAuZ2V0KCcvJywgZnVuY3Rpb24gKF8sIF9fLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKSB7XG4gICAgICBuZXh0KEVycm9yQ29kZS5nZXROb3RGb3VuZChBUElfRVJST1IuV0VCX0RJU0FCTEVEKSk7XG4gICAgfSk7XG4gIH1cblxuICBhcHAuZ2V0KCcvKicsIGZ1bmN0aW9uIChfLCBfXywgbmV4dDogJE5leHRGdW5jdGlvblZlcikge1xuICAgIG5leHQoRXJyb3JDb2RlLmdldE5vdEZvdW5kKEFQSV9FUlJPUi5GSUxFX05PVF9GT1VORCkpO1xuICB9KTtcbiAgYXBwLnVzZShoYW5kbGVFcnJvcihsb2dnZXIpKTtcbiAgYXBwLnVzZShmaW5hbCk7XG5cbiAgcmV0dXJuIGFwcDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IChhc3luYyBmdW5jdGlvbiAoY29uZmlnSGFzaDogYW55KSB7XG4gIHNldHVwKGNvbmZpZ0hhc2gubG9ncyk7XG4gIGNvbnN0IGNvbmZpZzogSUNvbmZpZyA9IG5ldyBBcHBDb25maWcoXy5jbG9uZURlZXAoY29uZmlnSGFzaCkpO1xuICAvLyByZWdpc3RlciBtaWRkbGV3YXJlIHBsdWdpbnNcbiAgY29uc3QgcGx1Z2luX3BhcmFtcyA9IHtcbiAgICBjb25maWc6IGNvbmZpZyxcbiAgICBsb2dnZXI6IGxvZ2dlcixcbiAgfTtcbiAgY29uc3QgZmlsdGVycyA9IGxvYWRQbHVnaW4oXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5maWx0ZXJzIHx8IHt9LFxuICAgIHBsdWdpbl9wYXJhbXMsXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIChwbHVnaW46IHBsdWdpblV0aWxzLk1hbmlmZXN0RmlsdGVyPElDb25maWc+KSA9PiBwbHVnaW4uZmlsdGVyX21ldGFkYXRhXG4gICk7XG4gIGNvbnN0IHN0b3JhZ2UgPSBuZXcgU3RvcmFnZShjb25maWcpO1xuICAvLyB3YWl0cyB1bnRpbCBpbml0IGNhbGxzIGhhdmUgYmVlbiBpbml0aWFsaXplZFxuICBhd2FpdCBzdG9yYWdlLmluaXQoY29uZmlnLCBmaWx0ZXJzKTtcbiAgcmV0dXJuIGF3YWl0IGRlZmluZUFQSShjb25maWcsIHN0b3JhZ2UpO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSxPQUFBLEdBQUFOLE9BQUE7QUFHQSxJQUFBTyxLQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUSxRQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUyxVQUFBLEdBQUFULE9BQUE7QUFDQSxJQUFBVSxPQUFBLEdBQUFWLE9BQUE7QUFDQSxJQUFBVyxhQUFBLEdBQUFaLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBWSxRQUFBLEdBQUFiLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBYSxNQUFBLEdBQUFiLE9BQUE7QUFFQSxJQUFBYyxNQUFBLEdBQUFmLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBZSxTQUFBLEdBQUFoQixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQWdCLFlBQUEsR0FBQWhCLE9BQUE7QUFDQSxJQUFBaUIsSUFBQSxHQUFBbEIsc0JBQUEsQ0FBQUMsT0FBQTtBQUFrQyxTQUFBRCx1QkFBQW1CLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FB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