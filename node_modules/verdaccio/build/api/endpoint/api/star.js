"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash"));
var _constants = require("../../../lib/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // @flow
const debug = (0, _debug.default)('verdaccio:star');
function _default(storage) {
  const validateInputs = (newUsers, localUsers, username, isStar) => {
    const isExistlocalUsers = _lodash.default.isNil(localUsers[username]) === false;
    if (isStar && isExistlocalUsers && localUsers[username]) {
      return true;
    } else if (!isStar && isExistlocalUsers) {
      return false;
    } else if (!isStar && !isExistlocalUsers) {
      return true;
    }
    return false;
  };
  return (req, res, next) => {
    const name = req.params.package;
    debug('starring a package for %o', name);
    const afterChangePackage = function (err) {
      if (err) {
        return next(err);
      }
      res.status(_constants.HTTP_STATUS.OK);
      next({
        success: true
      });
    };
    storage.getPackage({
      name,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }
        const newStarUser = req.body[_constants.USERS];
        const remoteUsername = req.remote_user.name;
        const localStarUsers = info[_constants.USERS];
        // Check is star or unstar
        const isStar = Object.keys(newStarUser).includes(remoteUsername);
        if (_lodash.default.isNil(localStarUsers) === false && validateInputs(newStarUser, localStarUsers, remoteUsername, isStar)) {
          return afterChangePackage();
        }
        const users = isStar ? _objectSpread(_objectSpread({}, localStarUsers), {}, {
          [remoteUsername]: true
        }) : _lodash.default.reduce(localStarUsers, (users, value, key) => {
          if (key !== remoteUsername) {
            users[key] = value;
          }
          return users;
        }, {});
        storage.changePackage(name, _objectSpread(_objectSpread({}, info), {}, {
          users
        }), req.body._rev, function (err) {
          afterChangePackage(err);
        });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,