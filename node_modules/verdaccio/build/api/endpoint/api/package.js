"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _lodash = _interopRequireDefault(require("lodash"));
var _middleware = require("@verdaccio/middleware");
var _tarball = require("@verdaccio/tarball");
var _constants = require("../../../lib/constants");
var _logger = require("../../../lib/logger");
var _utils = require("../../../lib/utils");
var _string = require("../../../utils/string");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const downloadStream = (packageName, filename, storage, req, res) => {
  const stream = storage.getTarball(packageName, filename);
  stream.on('content-length', function (content) {
    res.header('Content-Length', content);
  });
  stream.on('error', function (err) {
    return res.locals.report_error(err);
  });
  res.header(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.OCTET_STREAM);
  stream.pipe(res);
};
const redirectOrDownloadStream = (packageName, filename, storage, req, res, config) => {
  const tarballUrlRedirect = _lodash.default.get(config, 'experiments.tarball_url_redirect');
  storage.hasLocalTarball(packageName, filename).then(hasLocalTarball => {
    if (hasLocalTarball) {
      const context = {
        packageName,
        filename
      };
      const tarballUrl = typeof tarballUrlRedirect === 'function' ? tarballUrlRedirect(context) : _lodash.default.template(tarballUrlRedirect)(context);
      res.redirect(tarballUrl);
    } else {
      downloadStream(packageName, filename, storage, req, res);
    }
  }).catch(err => {
    res.locals.report_error(err);
  });
};
function _default(route, auth, storage, config) {
  const can = (0, _middleware.allow)(auth, {
    beforeAll: (params, message) => _logger.logger.trace(params, message),
    afterAll: (params, message) => _logger.logger.trace(params, message)
  });
  // TODO: anonymous user?
  route.get('/:package/:version?', can('access'), function (req, res, next) {
    const abbreviated = (0, _string.getByQualityPriorityValue)(req.get('Accept')) === 'application/vnd.npm.install-v1+json';
    const getPackageMetaCallback = function (err, metadata) {
      if (err) {
        return next(err);
      }
      metadata = (0, _tarball.convertDistRemoteToLocalTarballUrls)(metadata, {
        protocol: req.protocol,
        headers: req.headers,
        host: req.hostname,
        remoteAddress: req.socket.remoteAddress
      }, config.url_prefix);
      let queryVersion = req.params.version;
      if (_lodash.default.isNil(queryVersion)) {
        if (abbreviated) {
          res.setHeader(_constants.HEADERS.CONTENT_TYPE, 'application/vnd.npm.install-v1+json');
        } else {
          res.setHeader(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON);
        }
        return next(metadata);
      }
      let version = (0, _utils.getVersion)(metadata, queryVersion);
      if (_lodash.default.isNil(version) === false) {
        res.setHeader(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON);
        return next(version);
      }
      if (_lodash.default.isNil(metadata[_constants.DIST_TAGS]) === false) {
        if (_lodash.default.isNil(metadata[_constants.DIST_TAGS][queryVersion]) === false) {
          queryVersion = metadata[_constants.DIST_TAGS][queryVersion];
          version = (0, _utils.getVersion)(metadata, queryVersion);
          if (_lodash.default.isNil(version) === false) {
            res.setHeader(_constants.HEADERS.CONTENT_TYPE, _constants.HEADERS.JSON);
            return next(version);
          }
        }
      }
      return next(_utils.ErrorCode.getNotFound(`${_constants.API_ERROR.VERSION_NOT_EXIST}: ${req.params.version}`));
    };
    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      abbreviated,
      callback: getPackageMetaCallback
    });
  });
  route.get('/:scopedPackage/-/:scope/:filename', can('access'), function (req, res) {
    const {
      scopedPackage,
      filename
    } = req.params;
    if (_lodash.default.get(config, 'experiments.tarball_url_redirect') === undefined) {
      downloadStream(scopedPackage, filename, storage, req, res);
    } else {
      redirectOrDownloadStream(scopedPackage, filename, storage, req, res, config);
    }
  });
  route.get('/:package/-/:filename', can('access'), function (req, res) {
    if (_lodash.default.get(config, 'experiments.tarball_url_redirect') === undefined) {
      downloadStream(req.params.package, req.params.filename, storage, req, res);
    } else {
      redirectOrDownloadStream(req.params.package, req.params.filename, storage, req, res, config);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,