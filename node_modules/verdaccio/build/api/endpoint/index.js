"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _express = _interopRequireDefault(require("express"));
var _distTags = _interopRequireDefault(require("./api/dist-tags"));
var _package = _interopRequireDefault(require("./api/package"));
var _ping = _interopRequireDefault(require("./api/ping"));
var _publish = _interopRequireDefault(require("./api/publish"));
var _search = _interopRequireDefault(require("./api/search"));
var _stars = _interopRequireDefault(require("./api/stars"));
var _user = _interopRequireDefault(require("./api/user"));
var _profile = _interopRequireDefault(require("./api/v1/profile"));
var _search2 = _interopRequireDefault(require("./api/v1/search"));
var _token = _interopRequireDefault(require("./api/v1/token"));
var _whoami = _interopRequireDefault(require("./api/whoami"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  match,
  validateName,
  validatePackage,
  encodeScopePackage,
  antiLoop
} = require('@verdaccio/middleware');
function _default(config, auth, storage) {
  /* eslint new-cap:off */
  const app = _express.default.Router();
  /* eslint new-cap:off */
  // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble
  app.param('package', validatePackage);
  app.param('filename', validateName);
  app.param('tag', validateName);
  app.param('version', validateName);
  app.param('revision', validateName);
  app.param('token', validateName);

  // these can't be safely put into express url for some reason
  // TODO: For some reason? what reason?
  app.param('_rev', match(/^-rev$/));
  app.param('org_couchdb_user', match(/^org\.couchdb\.user:/));
  app.use(auth.apiJWTmiddleware());
  app.use(_express.default.json({
    strict: false,
    limit: config.max_body_size || '10mb'
  }));
  app.use(antiLoop(config));
  // encode / in a scoped package name to be matched as a single parameter in routes
  app.use(encodeScopePackage);
  (0, _whoami.default)(app);
  (0, _profile.default)(app, auth, config);
  (0, _search.default)(app, auth, storage);
  (0, _user.default)(app, auth, config);
  (0, _distTags.default)(app, auth, storage);
  (0, _publish.default)(app, auth, storage, config);
  (0, _ping.default)(app);
  (0, _stars.default)(app, storage);
  (0, _search2.default)(app, auth, storage);
  (0, _token.default)(app, auth, storage, config);
  (0, _package.default)(app, auth, storage, config);
  return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Rpc3RUYWdzIiwiX3BhY2thZ2UiLCJfcGluZyIsIl9wdWJsaXNoIiwiX3NlYXJjaCIsIl9zdGFycyIsIl91c2VyIiwiX3Byb2ZpbGUiLCJfc2VhcmNoMiIsIl90b2tlbiIsIl93aG9hbWkiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1hdGNoIiwidmFsaWRhdGVOYW1lIiwidmFsaWRhdGVQYWNrYWdlIiwiZW5jb2RlU2NvcGVQYWNrYWdlIiwiYW50aUxvb3AiLCJfZGVmYXVsdCIsImNvbmZpZyIsImF1dGgiLCJzdG9yYWdlIiwiYXBwIiwiZXhwcmVzcyIsIlJvdXRlciIsInBhcmFtIiwidXNlIiwiYXBpSldUbWlkZGxld2FyZSIsImpzb24iLCJzdHJpY3QiLCJsaW1pdCIsIm1heF9ib2R5X3NpemUiLCJ3aG9hbWkiLCJwcm9maWxlIiwic2VhcmNoIiwidXNlciIsImRpc3RUYWdzIiwicHVibGlzaCIsInBpbmciLCJzdGFycyIsInYxU2VhcmNoIiwidG9rZW4iLCJwa2ciXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYXBpL2VuZHBvaW50L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxuaW1wb3J0IEF1dGggZnJvbSAnLi4vLi4vbGliL2F1dGgnO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vLi4vbGliL3N0b3JhZ2UnO1xuaW1wb3J0IGRpc3RUYWdzIGZyb20gJy4vYXBpL2Rpc3QtdGFncyc7XG5pbXBvcnQgcGtnIGZyb20gJy4vYXBpL3BhY2thZ2UnO1xuaW1wb3J0IHBpbmcgZnJvbSAnLi9hcGkvcGluZyc7XG5pbXBvcnQgcHVibGlzaCBmcm9tICcuL2FwaS9wdWJsaXNoJztcbmltcG9ydCBzZWFyY2ggZnJvbSAnLi9hcGkvc2VhcmNoJztcbmltcG9ydCBzdGFycyBmcm9tICcuL2FwaS9zdGFycyc7XG5pbXBvcnQgdXNlciBmcm9tICcuL2FwaS91c2VyJztcbmltcG9ydCBwcm9maWxlIGZyb20gJy4vYXBpL3YxL3Byb2ZpbGUnO1xuaW1wb3J0IHYxU2VhcmNoIGZyb20gJy4vYXBpL3YxL3NlYXJjaCc7XG5pbXBvcnQgdG9rZW4gZnJvbSAnLi9hcGkvdjEvdG9rZW4nO1xuaW1wb3J0IHdob2FtaSBmcm9tICcuL2FwaS93aG9hbWknO1xuXG5jb25zdCB7XG4gIG1hdGNoLFxuICB2YWxpZGF0ZU5hbWUsXG4gIHZhbGlkYXRlUGFja2FnZSxcbiAgZW5jb2RlU2NvcGVQYWNrYWdlLFxuICBhbnRpTG9vcCxcbn0gPSByZXF1aXJlKCdAdmVyZGFjY2lvL21pZGRsZXdhcmUnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZzogQ29uZmlnLCBhdXRoOiBBdXRoLCBzdG9yYWdlOiBTdG9yYWdlKSB7XG4gIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICBjb25zdCBhcHAgPSBleHByZXNzLlJvdXRlcigpO1xuICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgLy8gdmFsaWRhdGUgYWxsIG9mIHRoZXNlIHBhcmFtcyBhcyBhIHBhY2thZ2UgbmFtZVxuICAvLyB0aGlzIG1pZ2h0IGJlIHRvbyBoYXJzaCwgc28gYXNrIGlmIGl0IGNhdXNlcyB0cm91YmxlXG4gIGFwcC5wYXJhbSgncGFja2FnZScsIHZhbGlkYXRlUGFja2FnZSk7XG4gIGFwcC5wYXJhbSgnZmlsZW5hbWUnLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3RhZycsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgndmVyc2lvbicsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgncmV2aXNpb24nLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3Rva2VuJywgdmFsaWRhdGVOYW1lKTtcblxuICAvLyB0aGVzZSBjYW4ndCBiZSBzYWZlbHkgcHV0IGludG8gZXhwcmVzcyB1cmwgZm9yIHNvbWUgcmVhc29uXG4gIC8vIFRPRE86IEZvciBzb21lIHJlYXNvbj8gd2hhdCByZWFzb24/XG4gIGFwcC5wYXJhbSgnX3JldicsIG1hdGNoKC9eLXJldiQvKSk7XG4gIGFwcC5wYXJhbSgnb3JnX2NvdWNoZGJfdXNlcicsIG1hdGNoKC9eb3JnXFwuY291Y2hkYlxcLnVzZXI6LykpO1xuXG4gIGFwcC51c2UoYXV0aC5hcGlKV1RtaWRkbGV3YXJlKCkpO1xuICBhcHAudXNlKGV4cHJlc3MuanNvbih7IHN0cmljdDogZmFsc2UsIGxpbWl0OiBjb25maWcubWF4X2JvZHlfc2l6ZSB8fCAnMTBtYicgfSkpO1xuICBhcHAudXNlKGFudGlMb29wKGNvbmZpZykpO1xuICAvLyBlbmNvZGUgLyBpbiBhIHNjb3BlZCBwYWNrYWdlIG5hbWUgdG8gYmUgbWF0Y2hlZCBhcyBhIHNpbmdsZSBwYXJhbWV0ZXIgaW4gcm91dGVzXG4gIGFwcC51c2UoZW5jb2RlU2NvcGVQYWNrYWdlKTtcbiAgd2hvYW1pKGFwcCk7XG4gIHByb2ZpbGUoYXBwLCBhdXRoLCBjb25maWcpO1xuICBzZWFyY2goYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgdXNlcihhcHAsIGF1dGgsIGNvbmZpZyk7XG4gIGRpc3RUYWdzKGFwcCwgYXV0aCwgc3RvcmFnZSk7XG4gIHB1Ymxpc2goYXBwLCBhdXRoLCBzdG9yYWdlLCBjb25maWcpO1xuICBwaW5nKGFwcCk7XG4gIHN0YXJzKGFwcCwgc3RvcmFnZSk7XG4gIHYxU2VhcmNoKGFwcCwgYXV0aCwgc3RvcmFnZSk7XG4gIHRva2VuKGFwcCwgYXV0aCwgc3RvcmFnZSwgY29uZmlnKTtcbiAgcGtnKGFwcCwgYXV0aCwgc3RvcmFnZSwgY29uZmlnKTtcbiAgcmV0dXJuIGFwcDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBTUEsSUFBQUMsU0FBQSxHQUFBRixzQkFBQSxD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